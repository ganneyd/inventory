import "package:freezed_annotation/freezed_annotation.dart";
import "package:hive/hive.dart";
import "package:inventory_v1/core/util/util.dart";
import 'package:inventory_v1/domain/entities/part/part_entity.dart';

// required: associates our `part_model.dart` with the code generated by Freezed
part 'part_model.freezed.dart';
// optional: Since our Part class is serializable, we must add this line.
// But if Part was not serializable, we could skip it.
part 'part_model.g.dart';
//responsible fot data structure conversion between part entities and part models.
part 'adapter.dart';

///Part Model. Represents a part stored within the database inventory
@HiveType(typeId: 1)
@freezed
class PartModel extends PartEntity with _$PartModel {
  ///Constructor
  ///accepts a [name]
  ///           [nsn]
  ///           [partNumber]
  ///           [location]
  ///           [quantity]
  ///           [requisitionPoint]
  ///           [requisitionQuantity]
  ///           [serialNumber]
  ///           [unitOfIssue]
  factory PartModel({
    @HiveField(0) @Default(0) int index,
    @HiveField(1) @Default('unknown_part') String name,
    @HiveField(2) @Default('unknown_part') String nsn,
    @HiveField(3) @Default('unknown_part') String partNumber,
    @HiveField(4) @Default('unknown_part') String location,
    @HiveField(5) @Default(-1) int quantity,
    @HiveField(6) @Default(-1) int requisitionPoint,
    @HiveField(7) @Default(-1) int requisitionQuantity,
    @HiveField(8) @Default('N/A') String serialNumber,
    @HiveField(9) @Default(UnitOfIssue.NOT_SPECIFIED) UnitOfIssue unitOfIssue,
    @HiveField(10) @Default(0) int checksum,
    @HiveField(11) @Default(false) bool isDiscontinued,
  }) = _PartModel;

  factory PartModel.fromJson(Map<String, dynamic> json) =>
      _$PartModelFromJson(json);
}
